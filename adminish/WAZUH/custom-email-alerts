#!/var/ossec/framework/python/bin/python3
import json
import sys
import time
import os
import smtplib
from email.message import EmailMessage

email_server = "mail_server"
email_from = "sending mail"

def get_nested_value(data, keys, default='N/A'):
    current_data = data
    for key in keys:
        if isinstance(current_data, dict) and key in current_data:
            current_data = current_data[key]
        else:
            return default
    return current_data

def generate_msg(alert):
    """
    Define here what fields extract table field and what fields to extract from SIEM: 
    'Field_Name in Report': [['data','path','attribute']]
    """
    fields_to_extract = {
        "Rule": [["rule", "id"]],
        "Event": [["rule", "description"]],
        "Severity": [["rule", "level"]],
        "Agent": [["agent", "name"]],
        "Date": [["timestamp"]],
        "Target User": [
            ["username"],
            ["dstuser"],
            ["data", "win", "eventdata", "targetUserName"],
            ["data", "username"]
        ],
        "Subject User": [
            ["data", "win", "eventdata", "subjectUserName"],
            ],
        "IP": [
            ["data", "ep_addr"],
            ["data", "win", "eventdata", "ipAddress"]
        ],
        "Hostname": [
            ["data", "ep"]
        ]
    }

    extracted_values = {}
    for field, paths in fields_to_extract.items():
        for path in paths:
            extracted_values[field] = get_nested_value(alert, path)
            if extracted_values[field] != 'N/A':
                break

    timestamp = extracted_values.get("Date", "N/A")
    if timestamp != "N/A":
        t = time.strptime(timestamp.split('.')[0], '%Y-%m-%dT%H:%M:%S')
        extracted_values["Date"] = time.strftime('%c', t)

    subject = 'Wazuh Alert: {0}, {1}'.format(extracted_values["Event"], extracted_values["Agent"])

    html_rows = ""
    for key, value in extracted_values.items():
        html_rows += f"<tr><td><strong>{key}</strong></td><td>{value}</td></tr>"

    html_content = f"""
    <html>
        <head>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                }}
                table {{
                    border-collapse: collapse; /* keeps rows tightly packed */
                    width: 100%;
                }}
                td, th {{
                    border: 1px solid #ddd;
                    padding: 8px;
                }}
                th {{
                    background-color: #f2f2f2;
                }}
                .code-block {{
                background-color: #f4f4f4;
                padding: 12px;
                border: 1px solid #ddd;
                overflow-x: auto;
                font-family: Consolas, monospace;
                white-space: pre-wrap;
                word-wrap: break-word;
            }}
                
            </style>
        </head>

        <body>
            <h2>Wazuh Alert Report</h2>
            <table>
                {html_rows}
            </table>
            <h3>Raw Alert JSON</h3>
            <pre class="code-block"><code>{json.dumps(alert, indent=4)}</code></pre>
        </body>
    </html>
    """



    # Plain text fallback
    text_content = "\n".join(f"{key} = {value}" for key, value in extracted_values.items())
    text_content += "\n\nThe full contents of the alert are:\n" + json.dumps(alert, indent=4)

    return subject, text_content, html_content


# Additional global vars
debug_enabled = False
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)

def main(args):
    """
    Main function. This will call the functions to prepare the message and send the email.
    """
    debug("# Starting")

    # Read args
    alert_file_location = args[1]
    recipients = args[3]

    debug("# Webhook")
    debug(recipients)

    debug("# File location")
    debug(alert_file_location)

    # Load alert. Parse JSON object.
    with open(alert_file_location) as alert_file:
        json_alert = json.load(alert_file)
    debug("# Processing alert")
    debug(json_alert)

    debug("# Generating message")
    subject, text_msg, html_msg = generate_msg(json_alert)
    debug(msg)

    debug("# Sending message")
    send_email(recipients, subject, text_msg, html_msg)

def send_email(recipients, subject, text_body, html_body):
    TO = recipients.split(',')
    em = EmailMessage()
    em['To'] = ', '.join(TO)
    em['From'] = email_from
    em['Subject'] = subject
    em.set_content(text_body)
    em.add_alternative(html_body, subtype='html')

    try:
        mailserver = smtplib.SMTP(email_server, 25)
        mailserver.ehlo()
        mailserver.send_message(em)
        mailserver.close()
        debug('Successfully sent the mail to {}'.format(TO))
    except Exception as e:
        debug("Failed to send mail to {}".format(TO))
        debug("With error: {}".format(e))


def debug(msg):
    """
    Function to generate debug logs
    """
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)
        print(msg)
        f = open(log_file, "a")
        f.write(msg)
        f.close()

if __name__ == "__main__":
    try:
        # Read arguments
        bad_arguments = False
        if len(sys.argv) >= 4:
            msg = '{0} {1} {2} {3} {4}'.format(
                now,
                sys.argv[1],
                sys.argv[2],
                sys.argv[3],
                sys.argv[4] if len(sys.argv) > 4 else '',
            )
            debug_enabled = (len(sys.argv) > 4 and sys.argv[4] == 'debug')
        else:
            msg = '{0} Wrong arguments'.format(now)
            bad_arguments = True

        # Logging the call
        f = open(log_file, 'a')
        f.write(msg + '\n')
        f.close()

        if bad_arguments:
            debug("# Exiting: Bad arguments.")
            sys.exit(1)

        # Main function
        main(sys.argv)

    except Exception as e:
        debug(str(e))
        raise

